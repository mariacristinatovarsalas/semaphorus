{"version":3,"sources":["contexts/ThingsToDoContext.js","components/Header.js","components/ThingToDo.js","components/ThingsToDoList.js","components/AddThingToDoForm.js","App.js","serviceWorker.js","index.js"],"names":["ThingsToDoContext","createContext","ThingsToDoContextProvider","props","useState","thing","urgency","id","thingsToDo","setThingsToDo","Provider","value","addThingToDo","Math","random","deleteThingToDo","filter","thingToDo","children","Header","useContext","className","length","ThingToDo","color","setColor","useEffect","backgroundColors","style","backgroundColor","onClick","ThingsToDoList","map","key","AddThingToDoForm","setThing","setUrgency","assignUrgency","e","target","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.20528549.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react'\r\n// import uuid from 'uuid/v1'\r\n\r\nexport const ThingsToDoContext = createContext()\r\n\r\nconst ThingsToDoContextProvider = (props) => {\r\n\r\n  const [thingsToDo, setThingsToDo] = useState([\r\n    { thing: \"Prepare dinner\", urgency: \"urgent\", id: 1 },\r\n    { thing: \"Organize bedroom\", urgency: \"not_urgent\", id: 2 },\r\n    { thing: \"Do homework\", urgency: \"normal\", id: 2 }\r\n  ]) \r\n\r\n  const addThingToDo = (thing, urgency) => {\r\n    setThingsToDo([...thingsToDo, { thing: thing, urgency: urgency, id: Math.random() }])\r\n  }\r\n\r\n  const deleteThingToDo = (id) => {\r\n    setThingsToDo(thingsToDo.filter(thingToDo => thingToDo.id !== id ))\r\n  }\r\n  \r\n\r\n  // const changeUrgency = (id) => {\r\n  //   var idMatch\r\n  //   setThingsToDo(\r\n  //      idMatch = thingsToDo.filter(thingToDo => thingToDo.id == id )\r\n\r\n  //   )\r\n  // }\r\n\r\n  return( \r\n    <ThingsToDoContext.Provider value={{ addThingToDo, deleteThingToDo, thingsToDo }}>\r\n      {props.children}\r\n    </ThingsToDoContext.Provider>\r\n  );\r\n\r\n}\r\n\r\nexport default ThingsToDoContextProvider","import React, { useContext } from 'react'\r\nimport { ThingsToDoContext } from '../contexts/ThingsToDoContext'\r\n\r\nconst Header = () => {\r\n\r\n const { thingsToDo } = useContext(ThingsToDoContext)\r\n\r\n  return(\r\n    <div className=\"header\">\r\n      <h1>Things To Do! :)</h1>\r\n      <h2>{thingsToDo.length} things to go</h2>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header","import React, { useContext, useState, useEffect } from 'react'\r\nimport { ThingsToDoContext } from '../contexts/ThingsToDoContext'\r\n\r\nconst ThingToDo = ({ thingToDo }) => {\r\n\r\n const { deleteThingToDo } = useContext(ThingsToDoContext)\r\n\r\n const [color, setColor] = useState(thingToDo.urgency)\r\n\r\n const backgroundColors = () => {\r\n  switch(color) {\r\n    case \"urgent\":\r\n      setColor(\"red\")\r\n      break\r\n    case \"normal\":\r\n      setColor(\"#FFC900\")\r\n      break\r\n    case \"not_urgent\":\r\n      setColor(\"green\")\r\n      break\r\n  }\r\n }\r\n  useEffect (() => {\r\n    backgroundColors()\r\n},[color])\r\n\r\n  return(\r\n  <li style={{backgroundColor:color}} className=\"thingToDo\">\r\n\r\n    <div className=\"btns_container\">\r\n      <div>{thingToDo.thing}</div>\r\n      {/* <div>{thingToDo.urgency}</div> */}\r\n    </div>\r\n    \r\n    <div className=\"btns_container\">\r\n      <button onClick={() => deleteThingToDo(thingToDo.id)} className=\"btn\">Delete</button>\r\n      <button onClick={()=>setColor(\"urgent\")} className=\"semaphorus red\"></button>\r\n      <button onClick={()=>setColor(\"normal\")} className=\"semaphorus yellow\"></button>\r\n      <button onClick={()=>setColor(\"not_urgent\")} className=\"semaphorus green\"></button>\r\n    </div>\r\n\r\n  </li> \r\n  )\r\n}\r\n\r\nexport default ThingToDo","import React, { useContext } from 'react'\r\nimport { ThingsToDoContext } from '../contexts/ThingsToDoContext'\r\nimport ThingToDo from './ThingToDo'\r\n\r\nconst ThingsToDoList = () => {\r\n\r\n const { thingsToDo } = useContext(ThingsToDoContext)\r\n\r\n  return(\r\n    <div className=\"thingsToDoList\">\r\n      <ul>\r\n        {thingsToDo.map(thingToDo => { \r\n          return <ThingToDo thingToDo={thingToDo} key={thingToDo.id}/> \r\n        })}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ThingsToDoList","import React, { useContext, useState } from 'react'\r\nimport { ThingsToDoContext } from '../contexts/ThingsToDoContext'\r\n\r\nconst AddThingToDoForm = () => {\r\n\r\n  const { addThingToDo } = useContext(ThingsToDoContext)\r\n  const [thing, setThing] = useState('')\r\n  const [urgency, setUrgency] = useState('')\r\n\r\n  const assignUrgency = (e) => {\r\n    setUrgency(e.target.id)\r\n  }\r\n\r\n  const createThingToDo = (e) => {\r\n    assignUrgency(e)\r\n    addThingToDo(thing, urgency)\r\n    setThing('');\r\n    setUrgency(''); \r\n  }\r\n\r\n \r\n\r\n  return(\r\n    <div className=\"form\">\r\n      <div className=\"btns_container\">\r\n        <input onChange={(e) => setThing(e.target.value)} value={thing}/>\r\n        {/* <input onChange={(e) => setUrgency(e.target.value)} /> */}\r\n      </div>\r\n      <div className=\"btns_container\">\r\n        <button id=\"urgent\" className=\"semaphorus red\" onClick={(e) => assignUrgency(e)}></button>\r\n        <button id=\"normal\" className=\"semaphorus yellow\" onClick={(e) => assignUrgency(e)}></button>\r\n        <button id=\"not_urgent\" className=\"semaphorus green\" onClick={(e) => assignUrgency(e)}></button>\r\n        <button className=\"btn\" onClick={createThingToDo}>Create</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddThingToDoForm","import React from 'react';\nimport './App.css';\nimport ThingsToDoContextProvider from './contexts/ThingsToDoContext'\nimport Header from './components/Header'\nimport ThingsToDoList from './components/ThingsToDoList'\nimport AddThingToDoForm from './components/AddThingToDoForm'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <ThingsToDoContextProvider>\n        <Header />\n        <ThingsToDoList />\n        <AddThingToDoForm />\n      </ThingsToDoContextProvider>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}